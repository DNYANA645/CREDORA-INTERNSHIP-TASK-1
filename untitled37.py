# -*- coding: utf-8 -*-
"""Untitled37.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/137VysOXzBIAgC2pYhZhrDsHQrD9ffmiO
"""

## TASK-1 OF INTERNSHIP AT CREDORA AS AN DATA SCIENCE !!
# Step 1: Import Libraries
import pandas as pd
import matplotlib.pyplot as plt
import seaborn as sns
import plotly.express as px

# Plot setup
sns.set(style='whitegrid')
plt.rcParams['figure.figsize'] = (12, 6)

# Load population data (skip metadata rows)
pop_df = pd.read_csv('/content/API_SP.POP.TOTL_DS2_en_csv_v2_85220.csv', skiprows=4)

# Load metadata (if needed later for country info or indicators)
meta_country = pd.read_csv('/content/Metadata_Country_API_SP.POP.TOTL_DS2_en_csv_v2_85220.csv')
meta_indicator = pd.read_csv('/content/Metadata_Indicator_API_SP.POP.TOTL_DS2_en_csv_v2_85220.csv')

# Preview population data
pop_df.head()

from matplotlib import pyplot as plt
import seaborn as sns
_df_5.groupby('Country Code').size().plot(kind='barh', color=sns.palettes.mpl_palette('Dark2'))
plt.gca().spines[['top', 'right',]].set_visible(False)

from matplotlib import pyplot as plt
import seaborn as sns
_df_4.groupby('Country Name').size().plot(kind='barh', color=sns.palettes.mpl_palette('Dark2'))
plt.gca().spines[['top', 'right',]].set_visible(False)

from matplotlib import pyplot as plt
import seaborn as sns
import pandas as pd
plt.subplots(figsize=(8, 8))
df_2dhist = pd.DataFrame({
    x_label: grp['Country Code'].value_counts()
    for x_label, grp in _df_14.groupby('Country Name')
})
sns.heatmap(df_2dhist, cmap='viridis')
plt.xlabel('Country Name')
_ = plt.ylabel('Country Code')

pop_df.info()

# Describe the three datasets
print("--- Population Data (pop_df) Description ---")
pop_df.info()
print("\n")

print("--- Country Metadata (meta_country) Description ---")
meta_country.info()
print("\n")

print("--- Indicator Metadata (meta_indicator) Description ---")
meta_indicator.info()
print("\n")

# Display basic statistics for numeric columns in pop_df (years)
print("--- Population Data (pop_df) Basic Statistics ---")
print(pop_df.describe())

latest_year = 2022

# Melt the dataframe to transform year columns into rows
pop_df_melted = pop_df.melt(
    id_vars=['Country Name', 'Country Code', 'Indicator Name', 'Indicator Code'],
    var_name='Year',
    value_name='Population'
)

# Convert 'Year' column to numeric, handling potential errors
pop_df_melted['Year'] = pd.to_numeric(pop_df_melted['Year'], errors='coerce')

# Drop rows where Year is not a valid number (e.g., last empty columns in the original data)
pop_df_melted.dropna(subset=['Year'], inplace=True)

# Convert Year to integer
pop_df_melted['Year'] = pop_df_melted['Year'].astype(int)

# Filter for the latest year and drop rows with null population values
latest_df = pop_df_melted[(pop_df_melted['Year'] == latest_year) & (pop_df_melted['Population'].notna())]

# Sort by Population and get the top 10
top10 = latest_df.sort_values(by='Population', ascending=False).head(10)

sns.barplot(data=top10, y='Country Name', x='Population', palette='magma')
plt.title(f"Top 10 Populated Countries in {latest_year}")
plt.xlabel("Population")
plt.ylabel("Country")
plt.tight_layout()
plt.show()

sns.histplot(latest_df['Population'], bins=30, kde=True, color='skyblue')
plt.title(f"Distribution of Country Populations in {latest_year}")
plt.xlabel("Population")
plt.ylabel("Number of Countries")
plt.tight_layout()
plt.show()

selected_countries = ['India', 'China', 'United States', 'Indonesia', 'Brazil']
# Use the melted dataframe pop_df_melted instead of the undefined variable df
df_line = pop_df_melted[pop_df_melted['Country Name'].isin(selected_countries)]

sns.lineplot(data=df_line, x='Year', y='Population', hue='Country Name', marker='o')
plt.title("Population Growth Over Time (2000â€“2022)")
plt.xlabel("Year")
plt.ylabel("Population")
plt.tight_layout()
plt.show()

fig = px.choropleth(latest_df,
                    locations="Country Name",
                    locationmode="country names",
                    color="Population",
                    hover_name="Country Name",
                    color_continuous_scale="Viridis",
                    title=f"Global Population Distribution by Country ({latest_year})")
fig.show()

